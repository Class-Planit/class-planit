# Generated by Django 3.2.4 on 2021-08-08 09:10

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_parent', models.BooleanField(default=False)),
                ('is_teacher', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_destrict', models.BooleanField(default=False)),
                ('is_student', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('is_pending', models.BooleanField(default=False)),
                ('is_demo', models.BooleanField(default=False)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='academicYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('planning_teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='bloomsLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=20, null=True)),
                ('group', models.CharField(blank=True, max_length=50, null=True)),
                ('color', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='classroom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classroom_title', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('academic_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.academicyear')),
            ],
        ),
        migrations.CreateModel(
            name='gradeLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.CharField(max_length=30)),
                ('grade_labels', models.CharField(blank=True, max_length=50, null=True)),
                ('grade_image', models.ImageField(blank=True, null=True, upload_to='images/grades/')),
            ],
        ),
        migrations.CreateModel(
            name='LearningDemonstration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(blank=True, max_length=1000, null=True)),
                ('topic_id', models.IntegerField(blank=True, default=0, null=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LearningDemonstrationTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(blank=True, max_length=1000, null=True)),
                ('is_plural', models.BooleanField(default=False)),
                ('is_multi', models.BooleanField(default=False)),
                ('grade_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.gradelevel')),
            ],
        ),
        migrations.CreateModel(
            name='learningStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=20, null=True)),
                ('group', models.CharField(blank=True, max_length=50, null=True)),
                ('color', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='lessonObjective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_of', models.IntegerField(blank=True, default=0, null=True)),
                ('is_skill', models.BooleanField(default=False)),
                ('objective_title', models.CharField(blank=True, max_length=200, null=True)),
                ('teacher_objective', models.CharField(blank=True, max_length=1500, null=True)),
                ('current_grade_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.gradelevel')),
                ('lesson_classroom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.classroom')),
                ('objectives_demonstration', models.ManyToManyField(blank=True, null=True, related_name='objectives_demonstration', to='planit.LearningDemonstration')),
            ],
        ),
        migrations.CreateModel(
            name='lessonPDFImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_image', models.ImageField(blank=True, null=True, upload_to='images/words/')),
                ('matched_lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
            ],
        ),
        migrations.CreateModel(
            name='lessonSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_num', models.CharField(blank=True, max_length=5, null=True)),
                ('title', models.CharField(blank=True, max_length=150, null=True)),
                ('content', models.CharField(blank=True, max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='lessonSectionTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=300, null=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('lesson_section', models.ManyToManyField(blank=True, to='planit.lessonSection')),
            ],
        ),
        migrations.CreateModel(
            name='mainQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=500)),
                ('answer', models.CharField(blank=True, max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='multipleIntelligence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mi', models.CharField(blank=True, max_length=200, null=True)),
                ('mi_label', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='questionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='shortStorySection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=500, null=True)),
                ('text', models.CharField(blank=True, max_length=5000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='singleStandard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('standard_identifier', models.CharField(blank=True, max_length=100, null=True)),
                ('skill_topic', models.TextField(max_length=200)),
                ('standard_objective', models.CharField(blank=True, max_length=1000, null=True)),
                ('competency', models.TextField(max_length=1000)),
                ('grade_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.gradelevel')),
            ],
        ),
        migrations.CreateModel(
            name='standardSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Location', models.TextField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='standardSubjects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_title', models.CharField(max_length=100)),
                ('is_admin', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('grade_level', models.ManyToManyField(blank=True, related_name='subject_grades', to='planit.gradeLevel')),
                ('standards_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardset')),
            ],
        ),
        migrations.CreateModel(
            name='storyFull',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Title', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='storySection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Title', models.CharField(blank=True, max_length=1000, null=True)),
                ('Section', models.CharField(blank=True, max_length=10000, null=True)),
                ('Section_Image', models.ImageField(blank=True, null=True, upload_to='images/story/')),
            ],
        ),
        migrations.CreateModel(
            name='studentPraiseTheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_image', models.ImageField(blank=True, null=True, upload_to='images/praise/')),
                ('theme_title', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='studentQuestionAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(blank=True, max_length=200, null=True)),
                ('question', models.CharField(blank=True, max_length=200, null=True)),
                ('correct', models.CharField(blank=True, max_length=200, null=True)),
                ('answer', models.CharField(blank=True, max_length=200, null=True)),
                ('is_graded', models.BooleanField(default=False)),
                ('is_correct', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='studentWorksheetAnswerFull',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_of', models.IntegerField(blank=True, default=0, null=True)),
                ('nickname', models.CharField(blank=True, max_length=200, null=True)),
                ('correct_points', models.IntegerField(blank=True, default=0, null=True)),
                ('total_possible', models.IntegerField(blank=True, default=0, null=True)),
                ('score', models.IntegerField(blank=True, default=0, null=True)),
                ('is_graded', models.BooleanField(default=False)),
                ('is_passing', models.BooleanField(default=False)),
                ('is_submitted', models.BooleanField(default=False)),
                ('assignment_num', models.IntegerField(blank=True, default=0, null=True)),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('student_answers', models.ManyToManyField(blank=True, null=True, related_name='student_answers', to='planit.studentQuestionAnswer')),
            ],
        ),
        migrations.CreateModel(
            name='teacherQuestionnaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_grade', models.CharField(blank=True, max_length=100, null=True)),
                ('current_state', models.CharField(blank=True, max_length=100, null=True)),
                ('current_planning', models.TextField(blank=True, max_length=1000, null=True)),
                ('happy_scale', models.CharField(blank=True, max_length=50, null=True)),
                ('lesson_good', models.TextField(blank=True, max_length=1000, null=True)),
                ('lesson_bad', models.TextField(blank=True, max_length=1000, null=True)),
                ('ideal_feature', models.TextField(blank=True, max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='textBookBackground',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('page_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('section', models.CharField(blank=True, max_length=500, null=True)),
                ('header', models.CharField(blank=True, max_length=500, null=True)),
                ('line_text', models.CharField(blank=True, max_length=1000, null=True)),
                ('line_lemma', models.CharField(blank=True, max_length=1000, null=True)),
                ('term_created', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='textBookTitle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(max_length=500)),
                ('lesson_id_num', models.IntegerField(blank=True, default=0, null=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('wiki_page', tinymce.models.HTMLField(blank=True, null=True)),
                ('prim_topic_id', models.IntegerField(blank=True, default=0, null=True)),
                ('grade_level', models.ManyToManyField(blank=True, related_name='book_grade', to='planit.gradeLevel')),
                ('standards_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardset')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardsubjects')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='topicDescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic_id', models.IntegerField(blank=True, default=0, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('is_admin', models.BooleanField(default=True)),
                ('is_gen', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='topicInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(blank=True, max_length=500, null=True)),
                ('item', models.CharField(blank=True, max_length=200, null=True)),
                ('image_name', models.CharField(blank=True, max_length=500, null=True)),
                ('image_url', models.URLField(blank=True, max_length=500, null=True)),
                ('image_file', models.ImageField(blank=True, null=True, upload_to='images/topic/')),
                ('is_admin', models.BooleanField(default=True)),
                ('from_wiki', models.BooleanField(default=False)),
                ('is_secondary', models.BooleanField(default=False)),
                ('topic_id', models.IntegerField(blank=True, default=0, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('description', models.ManyToManyField(blank=True, to='planit.topicDescription')),
                ('grade_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.gradelevel')),
                ('standard_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardset')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardsubjects')),
                ('text_index', models.ManyToManyField(blank=True, to='planit.textBookBackground')),
            ],
        ),
        migrations.CreateModel(
            name='topicQuestionitem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(blank=True, max_length=200, null=True)),
                ('question_points', models.IntegerField(blank=True, default=1, null=True)),
                ('Question', models.CharField(blank=True, max_length=2500, null=True)),
                ('Correct', models.CharField(blank=True, max_length=1000, null=True)),
                ('Incorrect_One', models.CharField(blank=True, max_length=1000, null=True)),
                ('Incorrect_Two', models.CharField(blank=True, max_length=1000, null=True)),
                ('Incorrect_Three', models.CharField(blank=True, max_length=1000, null=True)),
                ('explanation', models.CharField(blank=True, max_length=1500, null=True)),
                ('is_admin', models.BooleanField(default=True)),
                ('original_num', models.IntegerField(blank=True, default=0, null=True)),
                ('trans_line_num', models.IntegerField(blank=True, default=0, null=True)),
                ('is_video', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='topicTypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='userImageUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=20, null=True)),
                ('uploaded_image', models.ImageField(blank=True, null=True, upload_to='images/question/')),
                ('image_url', models.URLField(blank=True, max_length=500, null=True)),
                ('uploaded_date', models.DateField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='userNickname',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
                ('is_firstname', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='waitlistUserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('grade_levels', models.CharField(max_length=100)),
                ('subjects', models.CharField(max_length=100)),
                ('school_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='youtubeLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vid_id', models.CharField(max_length=1000)),
                ('line_num', models.IntegerField(blank=True, default=0, null=True)),
                ('transcript_text', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='youtubeSearchResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_selected', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=500)),
                ('link', models.CharField(blank=True, max_length=500, null=True)),
                ('vid_id', models.CharField(max_length=1000)),
                ('lesson_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
                ('transcript_lines', models.ManyToManyField(blank=True, to='planit.youtubeLine')),
            ],
        ),
        migrations.CreateModel(
            name='worksheetTheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.CharField(blank=True, max_length=12, null=True)),
                ('secondary', models.CharField(blank=True, max_length=12, null=True)),
                ('link', models.CharField(blank=True, max_length=12, null=True)),
                ('background_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='background_image', to='planit.userimageupload')),
                ('demo_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='demo_image', to='planit.userimageupload')),
                ('first_name', models.ManyToManyField(blank=True, related_name='first_name', to='planit.userNickname')),
                ('icon_image', models.ManyToManyField(blank=True, related_name='icon_image', to='planit.userImageUpload')),
                ('last_name', models.ManyToManyField(blank=True, related_name='last_name', to='planit.userNickname')),
            ],
        ),
        migrations.CreateModel(
            name='worksheetSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_title', models.CharField(blank=True, max_length=200, null=True)),
                ('directions', models.CharField(blank=True, max_length=1000, null=True)),
                ('section_image', models.ImageField(blank=True, null=True, upload_to='images/question/')),
                ('questions', models.ManyToManyField(blank=True, to='planit.topicQuestionitem')),
            ],
        ),
        migrations.CreateModel(
            name='worksheetFull',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_admin', models.BooleanField(default=False)),
                ('is_complete', models.BooleanField(default=False)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('ws_description', models.CharField(blank=True, max_length=500, null=True)),
                ('total_possible', models.IntegerField(blank=True, default=0, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('grade_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.gradelevel')),
                ('lesson_overview', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
                ('questions', models.ManyToManyField(blank=True, to='planit.topicQuestionitem')),
                ('standards_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardset')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardsubjects')),
                ('worksheet_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='worksheet_image', to='planit.userimageupload')),
                ('worksheet_theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='planit.worksheettheme')),
            ],
        ),
        migrations.CreateModel(
            name='worksheetClassAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_of', models.IntegerField(blank=True, default=0, null=True)),
                ('total_possible', models.IntegerField(blank=True, default=0, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('assigned_classrooms', models.ManyToManyField(blank=True, to='planit.classroom')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('lesson_overview', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
                ('student_answers', models.ManyToManyField(blank=True, to='planit.studentWorksheetAnswerFull')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardsubjects')),
                ('worksheet_full', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='planit.worksheetfull')),
            ],
        ),
        migrations.CreateModel(
            name='wikiTopic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_selected', models.BooleanField(default=False)),
                ('topic', models.CharField(max_length=1000)),
                ('term', models.CharField(blank=True, max_length=300, null=True)),
                ('relevance', models.IntegerField(blank=True, default=0, null=True)),
                ('lesson_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
                ('textbook_match', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.textbooktitle')),
            ],
        ),
        migrations.CreateModel(
            name='weeklyObjectives',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_of', models.CharField(max_length=10)),
                ('objectives', models.ManyToManyField(blank=True, to='planit.lessonObjective')),
                ('subject_classroom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.classroom')),
            ],
        ),
        migrations.CreateModel(
            name='vocabularyWord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=50)),
                ('p_o_s', models.CharField(blank=True, max_length=50, null=True)),
                ('definition', models.CharField(blank=True, max_length=500, null=True)),
                ('sentence', models.CharField(blank=True, max_length=300, null=True)),
                ('audio_file', models.FileField(blank=True, null=True, upload_to='')),
                ('question_image', models.ImageField(blank=True, null=True, upload_to='images/words/')),
                ('synonyms', models.CharField(blank=True, max_length=300, null=True)),
                ('antonyms', models.CharField(blank=True, max_length=300, null=True)),
                ('matched_standard', models.ManyToManyField(blank=True, to='planit.singleStandard')),
            ],
        ),
        migrations.CreateModel(
            name='vocabularyList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_of', models.CharField(max_length=10)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('lesson_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardsubjects')),
                ('vocab_words', models.ManyToManyField(blank=True, to='planit.vocabularyWord')),
            ],
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='Question_Image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='question_image', to='planit.userimageupload'),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='correct_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='correct_image', to='planit.userimageupload'),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='grade_level',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.gradelevel'),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='in_one_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Incorrect_One_image', to='planit.userimageupload'),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='in_three_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Incorrect_Three_image', to='planit.userimageupload'),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='in_two_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Incorrect_Two_image', to='planit.userimageupload'),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='lesson_overview',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective'),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='linked_text',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.textbookbackground'),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='linked_topic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.topicinformation'),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='question_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.questiontype'),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='standard_set',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardset'),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardsubjects'),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='topic_story',
            field=models.ManyToManyField(blank=True, to='planit.storyFull'),
        ),
        migrations.AddField(
            model_name='topicquestionitem',
            name='topic_type',
            field=models.ManyToManyField(blank=True, to='planit.topicTypes'),
        ),
        migrations.CreateModel(
            name='topicQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(blank=True, max_length=200, null=True)),
                ('question_points', models.IntegerField(blank=True, default=1, null=True)),
                ('Question', models.CharField(blank=True, max_length=2500, null=True)),
                ('Correct', models.CharField(blank=True, max_length=1000, null=True)),
                ('Incorrect_One', models.CharField(blank=True, max_length=1000, null=True)),
                ('Incorrect_Two', models.CharField(blank=True, max_length=1000, null=True)),
                ('Incorrect_Three', models.CharField(blank=True, max_length=1000, null=True)),
                ('explanation', models.CharField(blank=True, max_length=1500, null=True)),
                ('is_admin', models.BooleanField(default=True)),
                ('original_num', models.IntegerField(blank=True, default=0, null=True)),
                ('trans_line_num', models.IntegerField(blank=True, default=0, null=True)),
                ('is_video', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('grade_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.gradelevel')),
                ('lesson_overview', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
                ('linked_text', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.textbookbackground')),
                ('linked_topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.topicinformation')),
                ('question_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.questiontype')),
                ('standard_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardset')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardsubjects')),
                ('topic_story', models.ManyToManyField(blank=True, to='planit.storyFull')),
                ('topic_type', models.ManyToManyField(blank=True, to='planit.topicTypes')),
            ],
        ),
        migrations.AddField(
            model_name='topicinformation',
            name='topic_type',
            field=models.ManyToManyField(blank=True, to='planit.topicTypes'),
        ),
        migrations.AddField(
            model_name='textbookbackground',
            name='textbook',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='planit.textbooktitle'),
        ),
        migrations.CreateModel(
            name='teacherLessonTemplates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_section', models.ManyToManyField(blank=True, to='planit.lessonSectionTemplate')),
                ('planning_teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='teacherInvitations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invite_ref', models.CharField(blank=True, max_length=255, null=True, verbose_name='Teacher Reference')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_pending', models.BooleanField(default=True)),
                ('is_waitlist', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_by1', to=settings.AUTH_USER_MODEL)),
                ('for_classroom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.classroom')),
                ('new_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='new_user1', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='teacherInvitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invite_ref', models.CharField(blank=True, max_length=255, null=True, verbose_name='Teacher Reference')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_pending', models.BooleanField(default=True)),
                ('is_waitlist', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_by', to=settings.AUTH_USER_MODEL)),
                ('for_classroom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.classroom')),
                ('new_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='new_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='studentworksheetanswerfull',
            name='worksheet_assignment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='planit.worksheetfull'),
        ),
        migrations.AddField(
            model_name='studentquestionanswer',
            name='question_num',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='planit.topicquestionitem'),
        ),
        migrations.AddField(
            model_name='studentquestionanswer',
            name='student',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='studentquestionanswer',
            name='worksheet_assignment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='planit.worksheetfull'),
        ),
        migrations.CreateModel(
            name='studentProfiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_ref', models.CharField(blank=True, max_length=255, null=True, verbose_name='Student Reference')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('middle_names', models.CharField(blank=True, max_length=200, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=30, null=True)),
                ('student_pin', models.IntegerField(blank=True, default=0, null=True)),
                ('is_enrolled', models.BooleanField(default=False)),
                ('is_suspended', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('is_pending', models.BooleanField(default=False)),
                ('current_grade_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.gradelevel')),
                ('student_username', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_username', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='studentPraise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme_id', models.IntegerField(blank=True, default=0, null=True)),
                ('created_by', models.IntegerField(blank=True, default=0, null=True)),
                ('sent_date', models.DateField(blank=True, null=True)),
                ('week_of', models.IntegerField(blank=True, default=0, null=True)),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='studentInvitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invite_ref', models.CharField(blank=True, max_length=255, null=True, verbose_name='Student Reference')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_pending', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('for_classroom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.classroom')),
                ('grade_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='planit.gradelevel')),
                ('student_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='planit.studentprofiles')),
            ],
        ),
        migrations.AddField(
            model_name='storyfull',
            name='section',
            field=models.ManyToManyField(blank=True, to='planit.storySection'),
        ),
        migrations.AddField(
            model_name='singlestandard',
            name='standards_set',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardset'),
        ),
        migrations.AddField(
            model_name='singlestandard',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardsubjects'),
        ),
        migrations.CreateModel(
            name='singleRec',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sim_score', models.CharField(blank=True, max_length=100, null=True)),
                ('is_displayed', models.BooleanField(default=False)),
                ('single_rec_topics', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.topicinformation')),
            ],
        ),
        migrations.CreateModel(
            name='shortStory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=500, null=True)),
                ('author', models.CharField(blank=True, max_length=200, null=True)),
                ('story_image', models.ImageField(blank=True, null=True, upload_to='images/story/')),
                ('story_sections', models.ManyToManyField(blank=True, related_name='objectives_standards', to='planit.shortStorySection')),
            ],
        ),
        migrations.CreateModel(
            name='selectedActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_text', models.CharField(blank=True, max_length=1500, null=True)),
                ('verb', models.CharField(blank=True, max_length=100, null=True)),
                ('work_product', models.CharField(blank=True, max_length=300, null=True)),
                ('ks_demo', models.CharField(blank=True, max_length=1000, null=True)),
                ('bloom', models.IntegerField(blank=True, default=0, null=True)),
                ('mi', models.IntegerField(blank=True, default=0, null=True)),
                ('ret_rate', models.IntegerField(blank=True, default=0, null=True)),
                ('template_id', models.IntegerField(blank=True, default=0, null=True)),
                ('demo_num', models.IntegerField(blank=True, default=0, null=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_selected', models.BooleanField(default=False)),
                ('is_rejected', models.BooleanField(default=False)),
                ('mi_labels', models.CharField(blank=True, max_length=50, null=True)),
                ('bl_labels', models.CharField(blank=True, max_length=50, null=True)),
                ('bl_color', models.CharField(blank=True, max_length=50, null=True)),
                ('mi_color', models.CharField(blank=True, max_length=50, null=True)),
                ('mi_icon', models.CharField(blank=True, max_length=50, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('lesson_overview', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
                ('objectives_topics', models.ManyToManyField(blank=True, null=True, related_name='activitiy_topic', to='planit.topicInformation')),
                ('story', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.shortstory')),
            ],
        ),
        migrations.CreateModel(
            name='reccomendedTopics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('searched_level', models.IntegerField(blank=True, default=1, null=True)),
                ('matched_lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
                ('rec_topics', models.ManyToManyField(blank=True, null=True, related_name='reccomended_topics', to='planit.topicInformation')),
                ('removed_topics', models.ManyToManyField(blank=True, null=True, related_name='removed_topics', to='planit.topicInformation')),
                ('single_score', models.ManyToManyField(blank=True, null=True, to='planit.singleRec')),
            ],
        ),
        migrations.CreateModel(
            name='questionList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_of', models.CharField(max_length=10)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('lesson_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
                ('main_questions', models.ManyToManyField(blank=True, to='planit.mainQuestion')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardsubjects')),
            ],
        ),
        migrations.CreateModel(
            name='matchedTopics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_overview', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
                ('objectives_topics', models.ManyToManyField(blank=True, null=True, related_name='objectives_activity_topic', to='planit.topicInformation')),
            ],
        ),
        migrations.CreateModel(
            name='lessonText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_initial', models.BooleanField(default=True)),
                ('overview', tinymce.models.HTMLField(blank=True, null=True)),
                ('introduction', tinymce.models.HTMLField(blank=True, null=True)),
                ('activities', tinymce.models.HTMLField(blank=True, null=True)),
                ('lesson_terms', tinymce.models.HTMLField(blank=True, null=True)),
                ('is_plural', models.BooleanField(default=False)),
                ('is_multi', models.BooleanField(default=False)),
                ('matched_lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
            ],
        ),
        migrations.CreateModel(
            name='lessonTemplates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wording', models.CharField(blank=True, max_length=1000, null=True)),
                ('verb', models.CharField(blank=True, max_length=100, null=True)),
                ('work_product', models.CharField(blank=True, max_length=300, null=True)),
                ('grouping', models.CharField(blank=True, max_length=500, null=True)),
                ('bloom', models.IntegerField(blank=True, default=0, null=True)),
                ('mi', models.IntegerField(blank=True, default=0, null=True)),
                ('is_plural', models.BooleanField(default=False)),
                ('is_multi', models.BooleanField(default=False)),
                ('components', models.ManyToManyField(blank=True, related_name='multi_topics', to='planit.topicTypes')),
                ('grade_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.gradelevel')),
                ('ks_demo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.learningdemonstrationtemplate')),
                ('single_topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.topictypes')),
                ('story', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.shortstory')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardsubjects')),
            ],
        ),
        migrations.CreateModel(
            name='lessonStandardRecommendation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_selected', models.BooleanField(default=False)),
                ('lesson_classroom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.classroom')),
                ('objectives', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
                ('objectives_standard', models.ManyToManyField(blank=True, to='planit.singleStandard')),
            ],
        ),
        migrations.CreateModel(
            name='lessonProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.CharField(blank=True, max_length=200, null=True)),
                ('mi', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.multipleintelligence')),
                ('topic_type', models.ManyToManyField(blank=True, to='planit.topicTypes')),
            ],
        ),
        migrations.CreateModel(
            name='lessonPDFText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pdf_doc', models.FileField(blank=True, null=True, upload_to='file/')),
                ('content', models.CharField(blank=True, max_length=25000, null=True)),
                ('matched_lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
                ('pdf_images', models.ManyToManyField(blank=True, to='planit.lessonPDFImage')),
            ],
        ),
        migrations.AddField(
            model_name='lessonobjective',
            name='objectives_standards',
            field=models.ManyToManyField(blank=True, null=True, related_name='objectives_standards', to='planit.singleStandard'),
        ),
        migrations.AddField(
            model_name='lessonobjective',
            name='objectives_topics',
            field=models.ManyToManyField(blank=True, null=True, related_name='objectives_topic', to='planit.topicInformation'),
        ),
        migrations.AddField(
            model_name='lessonobjective',
            name='standard_set',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardset'),
        ),
        migrations.AddField(
            model_name='lessonobjective',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardsubjects'),
        ),
        migrations.CreateModel(
            name='lessonImageUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_image', models.ImageField(blank=True, null=True, upload_to='images/words/')),
                ('content', models.CharField(blank=True, max_length=2000, null=True)),
                ('matched_lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
            ],
        ),
        migrations.CreateModel(
            name='lessonFull',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=300, null=True)),
                ('blooms', models.ManyToManyField(blank=True, to='planit.bloomsLevel')),
                ('lesson_overview', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
                ('lesson_section', models.ManyToManyField(blank=True, to='planit.lessonSection')),
                ('main_questions', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.questionlist')),
                ('styles', models.ManyToManyField(blank=True, to='planit.learningStyle')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardsubjects')),
                ('vocabulary_list', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.vocabularylist')),
            ],
        ),
        migrations.AddField(
            model_name='learningdemonstrationtemplate',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardsubjects'),
        ),
        migrations.AddField(
            model_name='learningdemonstrationtemplate',
            name='topic_type',
            field=models.ManyToManyField(blank=True, to='planit.topicTypes'),
        ),
        migrations.CreateModel(
            name='keywordResults',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_selected', models.BooleanField(default=False)),
                ('word', models.CharField(blank=True, max_length=100, null=True)),
                ('p_o_s', models.CharField(blank=True, max_length=50, null=True)),
                ('definition', models.CharField(blank=True, max_length=600, null=True)),
                ('sentence', models.CharField(blank=True, max_length=600, null=True)),
                ('relevance', models.IntegerField(blank=True, default=0, null=True)),
                ('lesson_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
            ],
        ),
        migrations.AddField(
            model_name='gradelevel',
            name='standards_set',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardset'),
        ),
        migrations.CreateModel(
            name='googleSearchResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_selected', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=100)),
                ('link', models.CharField(max_length=500)),
                ('snippet', models.CharField(max_length=1000)),
                ('lesson_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
            ],
        ),
        migrations.CreateModel(
            name='googleRelatedQuestions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=500)),
                ('link', models.CharField(max_length=500)),
                ('snippet', models.CharField(max_length=1000)),
                ('relevance', models.IntegerField(blank=True, default=0, null=True)),
                ('is_selected', models.BooleanField(default=False)),
                ('lesson_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.lessonobjective')),
            ],
        ),
        migrations.CreateModel(
            name='classroomLists',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(blank=True, default=0, null=True)),
                ('academic_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.academicyear')),
                ('lesson_classroom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.classroom')),
                ('students', models.ManyToManyField(blank=True, null=True, related_name='classroom_students', to='planit.studentProfiles')),
            ],
        ),
        migrations.AddField(
            model_name='classroom',
            name='grade_level',
            field=models.ManyToManyField(blank=True, related_name='grade_level', to='planit.gradeLevel'),
        ),
        migrations.AddField(
            model_name='classroom',
            name='main_teacher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='main_teacher', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='classroom',
            name='single_grade',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='single_grade', to='planit.gradelevel'),
        ),
        migrations.AddField(
            model_name='classroom',
            name='standards_set',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardset'),
        ),
        migrations.AddField(
            model_name='classroom',
            name='student',
            field=models.ManyToManyField(blank=True, related_name='student', to='planit.studentProfiles'),
        ),
        migrations.AddField(
            model_name='classroom',
            name='subjects',
            field=models.ManyToManyField(blank=True, to='planit.standardSubjects'),
        ),
        migrations.AddField(
            model_name='classroom',
            name='support_teachers',
            field=models.ManyToManyField(blank=True, related_name='support_teacher', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='standards_set',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardset'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='school_user',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_role', serialize=False, to='planit.user')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('username', models.CharField(max_length=30)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=30, null=True)),
                ('use_whatsapp', models.BooleanField(default=False)),
                ('user_image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('standards_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='planit.standardset')),
            ],
        ),
    ]
